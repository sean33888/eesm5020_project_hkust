catch { setDesignMode -process 180 }
catch { setAnalysisMode -analysisType onChipVariation }
catch { setAnalysisMode -checkType setup }
catch { setAnalysisMode -clkSrcPath true }
catch { setAnalysisMode -clockPropagation sdcControl }
catch { setAnalysisMode -cppr both }
catch { setAnalysisMode -usefulSkew true }
catch { setAnalysisMode -virtualIPO false }
catch { setOptMode -activeHoldViews { wc } }
catch { setOptMode -activeSetupViews { wc } }
catch { setOptMode -autoHoldViews { wc} }
catch { setOptMode -autoSetupViews { wc} }
catch { setOptMode -autoTDGRSetupViews { wc} }
catch { setOptMode -autoViewHoldTargetSlack 0 }
catch { setOptMode -autoViewOpt false }
catch { setOptMode -deleteInst true }
catch { setOptMode -drcMargin 0 }
catch { setOptMode -fixDrc true }
catch { setOptMode -optimizeFF true }
catch { setOptMode -preserveAllSequential false }
catch { setOptMode -setupTargetSlack 0 }
catch { setExtractRCMode  -effortLevel low -engine postRoute -total_c_th 5 -relative_c_th 0.03 -coupling_c_th 3 -minNetTermNrToBeInMem 50 }
catch { setCTSMode -engine ccopt }
catch { set_ccopt_mode -cts_opt_type full }
catch { set_ccopt_mode -is_mode_set_route_top_mask false }
catch { set_ccopt_mode -is_mode_set_route_top_preferred_extra_space false }
catch {setNanoRouteMode -quiet -drouteAntennaFactor 1.000000}
catch {setNanoRouteMode -quiet -droutePostRouteSpreadWire "auto"}
catch {setNanoRouteMode -quiet -drouteStartIteration 0}
catch {setNanoRouteMode -quiet -extractThirdPartyCompatible false}
catch {setNanoRouteMode -quiet -grouteExpTdStdDelay 69.900000}
catch {setNanoRouteMode -quiet -grouteExpTdUseTifTimingEngineForImportDesign false}
catch {setNanoRouteMode -quiet -routeExpDirtyAreaEco false}
catch {setNanoRouteMode -quiet -routeExpSignatureEco false}
catch {setNanoRouteMode -quiet -routeWithSiDriven true}
catch {setNanoRouteMode -quiet -routeWithSiPostRouteFix false}
catch {setNanoRouteMode -quiet -routeWithTimingDriven true}
catch {setNanoRouteMode -quiet -timingEngine ""}

catch { setPlaceMode -place_global_reorder_scan false }
catch { setIlmMode -keepHighFanoutPorts true -keepLoopBack false -keepFlatten true }
catch { set_ccopt_mode -cts_opt_type full }
catch { set_ccopt_mode -is_mode_set_route_top_mask false }
catch { set_ccopt_mode -is_mode_set_route_top_preferred_extra_space false }
catch { setUsefulSkewMode -ecoRoute false }
catch { setDelayCalMode -enable_high_fanout true }
catch { setDelayCalMode -eng_copyNetPropToNewNet true }
catch { setDelayCalMode -eng_tcDelayMargin 1e-13 }
catch { setDelayCalMode -eng_tcSlewMargin 1e-13 }
catch { setDelayCalMode -engine aae }
catch { setDelayCalMode -ignoreNetLoad false }
catch { setDelayCalMode -SIAware false }
catch { setDelayCalMode -signOff true }
catch { setDelayCalMode -siMode signoff }
catch { setHierMode -disableArt false }
catch { setHierMode -reportPostRouteArtTiming false }
catch { setHierMode -trialRouteHonorReadOnly false }
catch { setImportMode -discardFloatingVNets false }
catch { setImportMode -keepEmptyModule true }
catch { setSIMode -analysisType aae }
catch { setSIMode -enable_glitch_report false }
catch { setSIMode -separate_delta_delay_on_data true }
catch { setAddStripeMode -stacked_via_bottom_layer METAL3 }
catch { setAddStripeMode -stacked_via_top_layer METAL4 }
catch { setRouteMode -earlyGlobalRouteSecondPG false }
catch { setFPlanMode -defaultTechSite core }
catch { setFPlanMode -maxIoHeight false }
catch { setFPlanMode -powerRailLayer {} }
